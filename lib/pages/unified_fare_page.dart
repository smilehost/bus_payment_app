// ‡∏™‡πà‡∏ß‡∏ô import library ‡πÅ‡∏•‡∏∞ widgets ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ
import 'dart:async';
import 'dart:io';

import 'package:bus_payment_app/models/card_use_response.dart';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:device_info_plus/device_info_plus.dart';

import '../services/card_service.dart'; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£
import '../services/fare_service.dart'; // ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scanbox
import '../utils/device_name_util.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
import '../widgets/fare_display.dart'; // UI ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
import '../widgets/promptpay_webview.dart'; // UI ‡πÅ‡∏™‡∏î‡∏á QR code
import '../widgets/result_dialog.dart'; // Dialog ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£
import 'package:geolocator/geolocator.dart';
import '../models/card_group.dart';

class UnifiedFarePage extends StatefulWidget {
  const UnifiedFarePage({super.key});

  @override
  State<UnifiedFarePage> createState() => _UnifiedFarePageState();
}

class _UnifiedFarePageState extends State<UnifiedFarePage> {
  WebViewController? _qrController; // ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° WebView QR
  int? remainingTrips; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£
  int? cardType; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£ 0 ‡∏£‡∏≠‡∏ö 1 ‡πÄ‡∏á‡∏¥‡∏ô
  DateTime? expireDate; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£ 0 ‡∏£‡∏≠‡∏ö 1 ‡πÄ‡∏á‡∏¥‡∏ô
  final FocusNode _focusNode =
      FocusNode(); // ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≤‡∏Å keyboard scanner
  final TextEditingController _controller =
      TextEditingController(); // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å scanner
  Timer? debounceTimer; // ‡∏Å‡∏±‡∏ô input ‡∏ã‡πâ‡∏≥‡∏ï‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô
  Timer? serialTimer; // Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö polling ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Scanbox
  Timer? cooldownTimer; // Cooldown timer ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥

  String serial = "Loading..."; // serial ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
  bool isLoading = false; // ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á loading overlay ‡∏ï‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏±‡∏ï‡∏£
  bool isCooldown = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cooldown ‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô
  int cooldownSeconds = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ cooldown ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠

  double? currentFare; // üÜï ‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å scanbox
  double? newCardPrice; // üÜï ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å activate
  int? cardGroupId;
  String promptpayUrl = ""; // URL ‡∏Ç‡∏≠‡∏á QR PromptPay
  int scanboxComId = 0;
  int scanboxBusId = 0;
  int scanboxBusroundLatest = 0;
  int scanboxFunc = 0;
  int scanboxPaymentMethodId = 0;
  String? _lastLoadedUrl;

  Timer? scanTimeoutTimer;

  @override
  void initState() {
    super.initState();

    _qrController = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted);

    fetchModel();
    fetchSerial();
    startScanboxPolling();

    WidgetsBinding.instance.addPostFrameCallback((_) {
      FocusScope.of(context).requestFocus(_focusNode);
    });
  }

  void startScanboxPolling() {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Scanbox ‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    serialTimer = Timer.periodic(const Duration(seconds: 5), (_) {
      loadScanboxData();
    });
  }

  Future<void> fetchSerial() async {
    // ‡∏î‡∏∂‡∏á serial ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Android ‡∏´‡∏£‡∏∑‡∏≠ iOS
    final deviceInfo = DeviceInfoPlugin();
    String? newSerial;

    if (Platform.isAndroid) {
      final deviceName = await DeviceNameUtil.getDeviceName();
      newSerial = deviceName;
    } else if (Platform.isIOS) {
      final iosInfo = await deviceInfo.iosInfo;
      newSerial = iosInfo.identifierForVendor;
    }

    // ‡∏ñ‡πâ‡∏≤ serial ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    if (newSerial != null && newSerial != serial) {
      setState(() {
        serial = newSerial!;
      });
      loadScanboxData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ serial
    }
  }

  Future<void> fetchModel() async {
    // ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô console (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô UI)
    final deviceName = await DeviceNameUtil.getDeviceName();
    print("üì± ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: $deviceName");
  }

  // üÜï ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏î
  double getPriceToUse() {
    if (scanboxFunc == 1 && newCardPrice != null) {
      return newCardPrice!;
    } else if (scanboxFunc == 0 && currentFare != null) {
      return currentFare!;
    } else {
      return 0.0;
    }
  }

  Future<void> loadScanboxData() async {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scanbox ‡∏à‡∏≤‡∏Å serial
    final scanbox = await ScanboxService.getScanboxBySerial(serial); // from API

    if (scanbox != null) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final isPriceChanged = scanbox.currentPrice != currentFare; // üÜï
      final isModeChanged = scanbox.scanboxFunc != scanboxFunc;

      if (isPriceChanged || isModeChanged) {
        setState(() {
          currentFare = scanbox.currentPrice; // üÜï ‡πÉ‡∏ä‡πâ currentFare
          promptpayUrl = scanbox.promptpayUrl;
          scanboxComId = scanbox.comId;
          scanboxBusId = scanbox.scanboxBusId;
          scanboxBusroundLatest = scanbox.scanboxBusroundLatest;
          scanboxFunc = scanbox.scanboxFunc;
          newCardPrice = null; // üÜï reset ‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î
          scanboxPaymentMethodId = scanbox.scanboxPaymentMethodId;
        });

        if (_qrController != null && promptpayUrl.isNotEmpty) {
          final uri = Uri.parse(promptpayUrl);
          final updatedUri = uri.replace(
            queryParameters: {
              ...uri.queryParameters,
              'price': getPriceToUse().toStringAsFixed(2), // üÜï
              'device_id': serial,
              'com_id': scanboxComId.toString(),
              'busno': scanboxBusId.toString(),
              'busround': scanboxBusroundLatest.toString(),
              'method_id': scanboxPaymentMethodId.toString(),
              'scanbox_func': scanboxFunc.toString(),
              'cardgroup_id': cardGroupId.toString(),
            },
          );

          final newUrl = updatedUri.toString();
          if (_lastLoadedUrl != newUrl) {
            _qrController!.loadRequest(updatedUri);
            _lastLoadedUrl = newUrl;
          }
        }
      } else {
        print("‚ÑπÔ∏è Price not changed. No reload.");
      }
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Scanbox");
    }
  }

  void startCooldown() {
    //‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á card
    setState(() {
      isCooldown = true;
      cooldownSeconds = 1;
    });

    cooldownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (cooldownSeconds <= 1) {
        timer.cancel();
        setState(() => isCooldown = false);
      } else {
        setState(() => cooldownSeconds--);
      }
    });
  }

  Future<void> handleCardScan(String hash) async {
    if (isLoading || isCooldown) return;

    setState(() => isLoading = true);

    try {
      final position = await getPositionWithFallback();
      final lat = position.latitude.toString();
      final long = position.longitude.toString();

      if (scanboxFunc == 1) {
        // üî∏ ‡πÄ‡∏Ñ‡∏™ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà
        final result = await CardService.activateCard(
          hash,
          scanboxBusroundLatest,
        );

        if (result['status'] == 'success') {
          final CardGroup group = result['data'];
          setState(() {
            newCardPrice = group.cardGroupPrice;
            cardGroupId = group.cardGroupId;
          });

          // üÜï trigger reload URL ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
          if (_qrController != null && promptpayUrl.isNotEmpty) {
            final uri = Uri.parse(promptpayUrl);
            final updatedUri = uri.replace(
              queryParameters: {
                ...uri.queryParameters,
                'price': getPriceToUse().toStringAsFixed(2),
                'device_id': serial,
                'com_id': scanboxComId.toString(),
                'busno': scanboxBusId.toString(),
                'busround': scanboxBusroundLatest.toString(),
                'method_id': scanboxPaymentMethodId.toString(),
                'scanbox_func': scanboxFunc.toString(),
                'cardgroup_id': cardGroupId.toString(),
              },
            );

            final newUrl = updatedUri.toString();
            if (_lastLoadedUrl != newUrl) {
              _qrController!.loadRequest(updatedUri);
              _lastLoadedUrl = newUrl;
            }
          }

          showResultDialog(
            context,
            "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß",
            remainingTrips: null,
            // cardType: 1,
            expireDate: null,
            onDismiss: () {},
          );
        } else {
          showResultDialog(
            context,
            (result['message'] != null &&
                    result['message'].toString().trim().isNotEmpty)
                ? result['message'].toString()
                : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ",
            isError: true,
            onDismiss: () {},
          );
        }
      } else {
        // üîπ ‡πÄ‡∏Ñ‡∏™ ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á scanboxFunc == 0
        final result =
            await CardService.useCard(
              hash,
              getPriceToUse(),
              scanboxBusId,
              scanboxBusroundLatest,
              lat,
              long,
            ).timeout(
              const Duration(seconds: 5),
              onTimeout: () {
                return CardUseResponse(
                  status: 'success',
                  message: '‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (timeout)',
                  remainingBalance: null,
                  cardType: null,
                  expireDate: null,
                );
              },
            );

        if (result.status == 'success') {
          // setState(() {
          //   remainingTrips = result.remainingBalance;
          //   cardType = result.cardType;
          //   expireDate = result.expireDate;
          // });
          setState(() {
            remainingTrips = result.remainingBalance ?? 0;
            cardType = result.cardType ?? 0;
            expireDate = result.expireDate;
          });
          showResultDialog(
            context,
            result.message,
            remainingTrips: remainingTrips,
            cardType: cardType,
            expireDate: expireDate,
            onDismiss: () => setState(() => remainingTrips = null),
          );
        } else {
          showResultDialog(
            context,
            result.message,
            isError: true,
            onDismiss: () => setState(() => remainingTrips = null),
          );
        }
      }
    } catch (e) {
      showResultDialog(
        context,
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        isError: true,
        onDismiss: () => setState(() => remainingTrips = null),
      );
    } finally {
      setState(() => isLoading = false);
      startCooldown();
    }
  }

  Widget buildPromptPaySection() {
    if (promptpayUrl.isEmpty) {
      return const Expanded(
        flex: 5,
        child: Center(child: CircularProgressIndicator()),
      );
    }

    if (scanboxFunc == 1 && newCardPrice == null) {
      // üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      return const Expanded(
        flex: 5,
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text(
                '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏±‡∏ï‡∏£...',
                style: TextStyle(fontSize: 24, color: Colors.white),
              ),
            ],
          ),
        ),
      );
    }

    // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á QR ‡πÅ‡∏•‡πâ‡∏ß
    final uri = Uri.parse(promptpayUrl);
    final updatedUri = uri.replace(
      queryParameters: {
        ...uri.queryParameters,
        'price': getPriceToUse().toStringAsFixed(2),
        'device_id': serial,
        'com_id': scanboxComId.toString(),
        'busno': scanboxBusId.toString(),
        'busround': scanboxBusroundLatest.toString(),
        'method_id': scanboxPaymentMethodId.toString(),
        'scanbox_func': scanboxFunc.toString(),
        'cardgroup_id': cardGroupId.toString(),
      },
    );

    print("method URL xxx=>: $updatedUri");

    return Expanded(
      flex: 5,
      child: PromptPayWebView(
        key: ValueKey(updatedUri.toString()),
        controller: _qrController!,
        url: updatedUri.toString(),
        zoomScale: 1.0,
      ),
    );
  }

  // Future<String> getCurrentLatitude() async {
  //   try {
  //     final position = await Geolocator.getCurrentPosition(
  //       desiredAccuracy: LocationAccuracy.medium, // Balanced ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
  //       timeLimit: const Duration(seconds: 3), // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
  //     );
  //     return position.latitude.toString();
  //   } catch (_) {
  //     final lastPosition = await Geolocator.getLastKnownPosition();
  //     return lastPosition?.latitude.toString() ?? '';
  //   }
  // }

  //   Future<String> getCurrentLongitude() async {
  //   try {
  //     final position = await Geolocator.getCurrentPosition(
  //       desiredAccuracy: LocationAccuracy.medium, // Balanced ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
  //       timeLimit: const Duration(seconds: 3), // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
  //     );
  //     return position.longitude.toString();
  //   } catch (_) {
  //     final lastPosition = await Geolocator.getLastKnownPosition();
  //     return lastPosition?.longitude.toString() ?? '';
  //   }
  // }

  Future<Position> getPositionWithFallback() async {
    try {
      return await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.medium,
        timeLimit: const Duration(seconds: 4),
      );
    } catch (_) {
      final lastKnown = await Geolocator.getLastKnownPosition();
      if (lastKnown != null) return lastKnown;
      rethrow;
    }
  }

  @override
  void dispose() {
    serialTimer?.cancel();
    debounceTimer?.cancel();
    cooldownTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Focus(
      canRequestFocus: false, // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏ö focus
      child: KeyboardListener(
        focusNode: _focusNode,
        onKeyEvent: (event) {
          if (isLoading || isCooldown) return;

          if (event.character != null && event.character!.isNotEmpty) {
            _controller.text += event.character!;
            final asciiOnly = _controller.text.replaceAll(
              RegExp(r'[^A-Za-z0-9]'),
              '',
            );

            // ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 64 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            if (asciiOnly.length > 64) {
              _controller.text = asciiOnly.substring(0, 64);
              return;
            }

            //  Reset timeout ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            scanTimeoutTimer?.cancel();
            scanTimeoutTimer = Timer(const Duration(seconds: 1), () {
              if (asciiOnly.length < 64) {
                _controller.clear();
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) {
                    Future.delayed(const Duration(seconds: 2), () {
                      Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á‡πÉ‡∏ô 2 ‡∏ß‡∏¥
                    });

                    return AlertDialog(
                      backgroundColor: const Color(0xFF0D1B2A),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(32),
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        vertical: 40,
                        horizontal: 32,
                      ),
                      content: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: const [
                          Icon(
                            Icons.error_outline,
                            color: Colors.redAccent,
                            size: 96,
                          ),
                          SizedBox(height: 24),
                          Text(
                            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ',
                            style: TextStyle(
                              fontSize: 36,
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 24),
                          Text(
                            '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                            style: TextStyle(
                              fontSize: 36,
                              color: Colors.white70,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    );
                  },
                );
              }
            });

            //  ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏£‡∏ö 64 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏≠‡∏î‡∏µ ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏á handler
            debounceTimer?.cancel();
            debounceTimer = Timer(const Duration(milliseconds: 300), () {
              if (asciiOnly.length == 64) {
                _controller.clear();
                scanTimeoutTimer?.cancel(); // ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                handleCardScan(asciiOnly);
              }
            });
          }
        },
        child: Scaffold(
          body: Stack(
            children: [
              Padding(
                padding: const EdgeInsets.all(24),
                child: Row(
                  children: [
                    // üîπ ‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
                    Expanded(
                      flex: 5,
                      child: FareDisplay(
                        currentPrice: getPriceToUse(), // üÜï
                        serial: serial,
                        lastLoadedUrl: _lastLoadedUrl,
                        scanboxFunc: scanboxFunc,
                      ),
                    ),
                    const SizedBox(width: 24),
                    // üîπ ‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á QR PromptPay
                    buildPromptPaySection(),
                  ],
                ),
              ),
              if (isLoading || isCooldown)
                Container(
                  color: Colors.black.withOpacity(0.6),
                  child: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        if (isLoading) ...[
                          const CircularProgressIndicator(color: Colors.white),
                          const SizedBox(height: 16),
                          const Text(
                            '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£...',
                            style: TextStyle(fontSize: 28, color: Colors.white),
                          ),
                        ] else if (isCooldown) ...[
                          const Icon(
                            Icons.timer_outlined,
                            color: Colors.white,
                            size: 64,
                          ),
                          const SizedBox(height: 16),
                          Text(
                            '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏≠‡∏µ‡∏Å $cooldownSeconds ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
                            style: const TextStyle(
                              fontSize: 28,
                              color: Colors.white,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
