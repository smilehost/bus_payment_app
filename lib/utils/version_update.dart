// lib/utils/version_update.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:bus_payment_app/utils/download_UI.dart';
import 'package:bus_payment_app/utils/download_progress_dialog.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:install_plugin/install_plugin.dart';
import 'package:overlay_support/overlay_support.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';

enum UpdateCheckResult {
  upToDate,
  softUpdateAvailable,
  forceUpdateRequired,
  failedOrAborted,
}

class VersionUpdater {
  static final _storage = const FlutterSecureStorage();
  static double? _lastPct;
  static final String baseUrl = dotenv.env['API_URL'] ?? '';

  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
  /// - ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å API (`API_BASE_URL/companyDetail/apk`)
  /// - ‡πÄ‡∏î‡πâ‡∏á dialog ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (force/soft) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î/‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ
  /// - ‡∏ñ‡πâ‡∏≤ `silent: true` ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏î‡πâ‡∏á toast ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
  static Future<UpdateCheckResult> checkAndMaybeUpdate(
    BuildContext context, {
    bool silent = false,
  }) async {
    // final base = dotenv.env['API_BASE_URL']?.trim() ?? '';
    final versionApi = '$baseUrl/companyDetail/scanboxApk';
    print('API_BASE_URL=${baseUrl}');
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô token / com_id
      // final token = (await _storage.read(key: 'token'))?.trim();
      // final comId = (await _storage.read(key: 'com_id'))?.trim();

      // if (token == null || token.isEmpty || comId == null || comId.isEmpty) {
      //   if (!silent) _toast('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏´‡∏£‡∏∑‡∏≠ com_id');
      //   return UpdateCheckResult.failedOrAborted;
      // }

      final info = await PackageInfo.fromPlatform();

      final dio = Dio(
        BaseOptions(
          connectTimeout: const Duration(seconds: 8),
          receiveTimeout: const Duration(seconds: 15),
          responseType: ResponseType.json,
          validateStatus: (s) => s != null && s >= 200 && s < 500,
          headers: {
            // 'Authorization': 'Bearer $token',
            'com_id': 4, // Express ‡∏à‡∏∞ lowercase ‡πÄ‡∏õ‡πá‡∏ô 'comid'
            'Accept': 'application/json',
          },
        ),
      );

      final res = await dio.get(versionApi);
      print('[VU] GET status=${res.statusCode}');
      print('[VU] body=${res.data}');

      if (res.statusCode != 200) {
        if (!silent) _toast('‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP ${res.statusCode})');
        return UpdateCheckResult.failedOrAborted;
      }

      final data = res.data is Map
          ? res.data as Map
          : json.decode(res.data as String) as Map;

      final minVersion = (data['min_supported_version'] ?? '')
          .toString()
          .trim();
      final latestVersion = (data['latest_version'] ?? '').toString().trim();
      final apkUrl = (data['apk_url'] ?? '').toString().trim();
      // final serverSha256 = (data['sha256'] ?? '').toString().trim(); // ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå

      // ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
      if (_isLower(info.version, minVersion)) {
        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        await _showForceDialog(context, apkUrl, latestVersion, info.version);
        return UpdateCheckResult.forceUpdateRequired;
      } else if (_isLower(info.version, latestVersion)) {
        // ‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (optional)
        if (!silent) {
          await _showSoftDialog(context, apkUrl, latestVersion);
        }
        return UpdateCheckResult.softUpdateAvailable;
      } else {
        if (!silent) _toast('‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        return UpdateCheckResult.upToDate;
      }
    } catch (e) {
      // if (!silent) _toast('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: $e');
      return UpdateCheckResult.failedOrAborted;
    }
  }

  // ---------- UI helpers ----------

  static Future<void> _showForceDialog(
    BuildContext context,
    String apkUrl,
    String targetVersion,
    String currentVersion,
  ) async {
    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => AlertDialog(
        title: const Text('‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'),
        content: Text(
          '‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $currentVersion \n'
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô $targetVersion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠\n',
        ),
        actions: [
          // TextButton(
          //   onPressed: () => Navigator.pop(context),
          //   child: const Text('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'),
          // ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              await _downloadAndInstall(context, apkUrl, targetVersion);
            },
            child: const Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'),
          ),
        ],
      ),
    );
  }

  static Future<void> _showSoftDialog(
    BuildContext context,
    String apkUrl,
    String targetVersion,
  ) async {
    await showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('‡∏°‡∏µ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà'),
        content: Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô $targetVersion ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              await _downloadAndInstall(context, apkUrl, targetVersion);
            },
            child: const Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'),
          ),
        ],
      ),
    );
  }

  // ---------- Core helpers ----------

  static bool _isLower(String a, String b) {
    if (b.isEmpty) return false;
    final pa = a.split('.').map((e) => int.tryParse(e) ?? 0).toList();
    final pb = b.split('.').map((e) => int.tryParse(e) ?? 0).toList();
    while (pa.length < 3) pa.add(0);
    while (pb.length < 3) pb.add(0);
    for (var i = 0; i < 3; i++) {
      if (pa[i] < pb[i]) return true;
      if (pa[i] > pb[i]) return false;
    }
    return false;
  }

  static Future<void> _downloadAndInstall(
    BuildContext context, // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° context
    String apkUrl,
    String version,
  ) async {
    if (apkUrl.isEmpty) {
      _toast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');
      return;
    }
    final dio = Dio();

    try {
      final dir = await getApplicationSupportDirectory();
      final savePath = '${dir.path}/update_$version.apk';

      // ‡πÄ‡∏£‡∏¥‡πà‡∏° UI
      DownloadUI.start();
      unawaited(
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (_) => DownloadProgressDialog(
            title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô $version',
            percent: DownloadUI.percent,
            detail: DownloadUI.detail,
            onCancel: () {
              DownloadUI.cancel();
              Navigator.of(context).maybePop();
            },
          ),
        ),
      );

      // ‡∏¢‡∏¥‡∏á‡πÇ‡∏´‡∏•‡∏î (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏£‡∏á + throttle 100ms)
      int lastRec = 0;
      int lastEmitMs = 0;
      final sw = Stopwatch()..start();

      await dio.download(
        apkUrl,
        savePath,
        cancelToken: DownloadUI.token(),
        onReceiveProgress: (rec, total) {
          final elapsedSec = sw.elapsedMilliseconds / 1000.0;
          final speedBps = elapsedSec > 0 ? (rec - lastRec) / elapsedSec : 0.0;

          final nowMs = DateTime.now().millisecondsSinceEpoch;
          if (nowMs - lastEmitMs >= 100 || rec == total) {
            DownloadUI.update(
              received: rec,
              total: total, // ‡∏ñ‡πâ‡∏≤ total <= 0 ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ö indeterminate ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
              speedBytesPerSec: speedBps,
            );
            lastEmitMs = nowMs;
            lastRec = rec;
            sw.reset();
          }
        },
      );

      DownloadUI.done();
      DownloadUI.installing();

      await InstallPlugin.installApk(savePath);

      // ‡∏õ‡∏¥‡∏î Dialog
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
    } on DioException catch (e) {
      if (CancelToken.isCancel(e)) {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        _toast('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
      } else {
        _toast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.message}');
      }
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
    } catch (e) {
      _toast('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e');
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
    }
  }

  static void _toast(String msg) {
    showSimpleNotification(Text(msg), background: Colors.black87);
  }
}
